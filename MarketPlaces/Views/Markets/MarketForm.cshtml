@* The first thing to do to create a new view is to specify the model behind the view (that changed to a view model later in the process of building the project)A view model is used when what is presented to the user is different from the model of the domain e.g. date and time  Another name for view nmodel is presentation model.  It is not part of the domain  *@
@model MarketPlaces.ViewModels.MarketFormViewModel
@{
    ViewBag.Title = Model.Heading;
}

<h2>@Model.Heading</h2>

@using (Html.BeginForm(Model.Action, "Markets"))

{ 
    <p class="alert alert-info">All fields are <strong>required</strong>.</p>
    
    //Place an antiforgery token here to prevent csrf attacks -cross-site request forgery which allows an attacker to perform actions on behalf of a user without their knowledge. eg. Creating markets on behalf of an organiiser without their knowledge
        @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    //Bootstrap has layout classes to use to create different looks.  - Google Bootstrap to find them.  E.g. .form-group wraps labels and controls with preset, optimum, spacing;  'form-control'  changes the look of the text box. Each div creates a new 'block' of labels and contseparates the different components onto a different 'line'
    //add validation message place holder for each property
      
<div class="form-group">
        @Html.LabelFor(m => m.Title)
        @Html.TextBoxFor(m => m.Title, new { @class = "form-control", autofocus = "autofocus" })
        @Html.ValidationMessageFor(m => m.Title)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Venue)
        @Html.TextBoxFor(m => m.Venue, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Venue)
    </div>
        //A place holder is used to show the user which format to use for date and time
    <div class="form-group">
        @Html.LabelFor(m => m.Date)
        @Html.TextBoxFor(m => m.Date, new { @class = "form-control", placeholder = "eg 1 Dec 2016" })
        @Html.ValidationMessageFor(m => m.Date)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Time)
        @Html.TextBoxFor(m => m.Time, new { @class = "form-control", placeholder = "eg 20:00" })
        @Html.ValidationMessageFor(m => m.Time)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Category)
        @Html.DropDownListFor(m => m.Category, new SelectList(Model.Categories, "Id", "Name"), "", new { @class = "form-control" })
        @*//add a "" to create an empty space at the top of the drop down list*@
        @Html.ValidationMessageFor(m => m.Category)
    </div>
        //all buttons are part of the btn class and there are secondary classes to determine colour - which can be changed.  Primary button is for primary actions on a page.  The label goes between the > <
        <button type="submit" class="btn btn-primary">Save</button>

}
@*//Add the bundle for client side validation.  Needs to come here so that it comes after the jquery bundle.  *@
@section scripts
    {
    @Scripts.Render("~/bundles/jqueryval")
}
